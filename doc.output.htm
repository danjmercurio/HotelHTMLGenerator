<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="generator" content="Docutils 0.14: http://docutils.sourceforge.net/" />
<title>htmlgenerator.py</title>
<style type="text/css">

/*
:Author: David Goodger (goodger@python.org)
:Id: $Id: html4css1.css 7952 2016-07-26 18:15:59Z milde $
:Copyright: This stylesheet has been placed in the public domain.

Default cascading style sheet for the HTML output of Docutils.

See http://docutils.sf.net/docs/howto/html-stylesheets.html for how to
customize this style sheet.
*/

/* used to remove borders from tables and images */
.borderless, table.borderless td, table.borderless th {
  border: 0 }

table.borderless td, table.borderless th {
  /* Override padding for "table.docutils td" with "! important".
     The right padding separates the table cells. */
  padding: 0 0.5em 0 0 ! important }

.first {
  /* Override more specific margin styles with "! important". */
  margin-top: 0 ! important }

.last, .with-subtitle {
  margin-bottom: 0 ! important }

.hidden {
  display: none }

.subscript {
  vertical-align: sub;
  font-size: smaller }

.superscript {
  vertical-align: super;
  font-size: smaller }

a.toc-backref {
  text-decoration: none ;
  color: black }

blockquote.epigraph {
  margin: 2em 5em ; }

dl.docutils dd {
  margin-bottom: 0.5em }

object[type="image/svg+xml"], object[type="application/x-shockwave-flash"] {
  overflow: hidden;
}

/* Uncomment (and remove this text!) to get bold-faced definition list terms
dl.docutils dt {
  font-weight: bold }
*/

div.abstract {
  margin: 2em 5em }

div.abstract p.topic-title {
  font-weight: bold ;
  text-align: center }

div.admonition, div.attention, div.caution, div.danger, div.error,
div.hint, div.important, div.note, div.tip, div.warning {
  margin: 2em ;
  border: medium outset ;
  padding: 1em }

div.admonition p.admonition-title, div.hint p.admonition-title,
div.important p.admonition-title, div.note p.admonition-title,
div.tip p.admonition-title {
  font-weight: bold ;
  font-family: sans-serif }

div.attention p.admonition-title, div.caution p.admonition-title,
div.danger p.admonition-title, div.error p.admonition-title,
div.warning p.admonition-title, .code .error {
  color: red ;
  font-weight: bold ;
  font-family: sans-serif }

/* Uncomment (and remove this text!) to get reduced vertical space in
   compound paragraphs.
div.compound .compound-first, div.compound .compound-middle {
  margin-bottom: 0.5em }

div.compound .compound-last, div.compound .compound-middle {
  margin-top: 0.5em }
*/

div.dedication {
  margin: 2em 5em ;
  text-align: center ;
  font-style: italic }

div.dedication p.topic-title {
  font-weight: bold ;
  font-style: normal }

div.figure {
  margin-left: 2em ;
  margin-right: 2em }

div.footer, div.header {
  clear: both;
  font-size: smaller }

div.line-block {
  display: block ;
  margin-top: 1em ;
  margin-bottom: 1em }

div.line-block div.line-block {
  margin-top: 0 ;
  margin-bottom: 0 ;
  margin-left: 1.5em }

div.sidebar {
  margin: 0 0 0.5em 1em ;
  border: medium outset ;
  padding: 1em ;
  background-color: #ffffee ;
  width: 40% ;
  float: right ;
  clear: right }

div.sidebar p.rubric {
  font-family: sans-serif ;
  font-size: medium }

div.system-messages {
  margin: 5em }

div.system-messages h1 {
  color: red }

div.system-message {
  border: medium outset ;
  padding: 1em }

div.system-message p.system-message-title {
  color: red ;
  font-weight: bold }

div.topic {
  margin: 2em }

h1.section-subtitle, h2.section-subtitle, h3.section-subtitle,
h4.section-subtitle, h5.section-subtitle, h6.section-subtitle {
  margin-top: 0.4em }

h1.title {
  text-align: center }

h2.subtitle {
  text-align: center }

hr.docutils {
  width: 75% }

img.align-left, .figure.align-left, object.align-left, table.align-left {
  clear: left ;
  float: left ;
  margin-right: 1em }

img.align-right, .figure.align-right, object.align-right, table.align-right {
  clear: right ;
  float: right ;
  margin-left: 1em }

img.align-center, .figure.align-center, object.align-center {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

table.align-center {
  margin-left: auto;
  margin-right: auto;
}

.align-left {
  text-align: left }

.align-center {
  clear: both ;
  text-align: center }

.align-right {
  text-align: right }

/* reset inner alignment in figures */
div.align-right {
  text-align: inherit }

/* div.align-center * { */
/*   text-align: left } */

.align-top    {
  vertical-align: top }

.align-middle {
  vertical-align: middle }

.align-bottom {
  vertical-align: bottom }

ol.simple, ul.simple {
  margin-bottom: 1em }

ol.arabic {
  list-style: decimal }

ol.loweralpha {
  list-style: lower-alpha }

ol.upperalpha {
  list-style: upper-alpha }

ol.lowerroman {
  list-style: lower-roman }

ol.upperroman {
  list-style: upper-roman }

p.attribution {
  text-align: right ;
  margin-left: 50% }

p.caption {
  font-style: italic }

p.credits {
  font-style: italic ;
  font-size: smaller }

p.label {
  white-space: nowrap }

p.rubric {
  font-weight: bold ;
  font-size: larger ;
  color: maroon ;
  text-align: center }

p.sidebar-title {
  font-family: sans-serif ;
  font-weight: bold ;
  font-size: larger }

p.sidebar-subtitle {
  font-family: sans-serif ;
  font-weight: bold }

p.topic-title {
  font-weight: bold }

pre.address {
  margin-bottom: 0 ;
  margin-top: 0 ;
  font: inherit }

pre.literal-block, pre.doctest-block, pre.math, pre.code {
  margin-left: 2em ;
  margin-right: 2em }

pre.code .ln { color: grey; } /* line numbers */
pre.code, code { background-color: #eeeeee }
pre.code .comment, code .comment { color: #5C6576 }
pre.code .keyword, code .keyword { color: #3B0D06; font-weight: bold }
pre.code .literal.string, code .literal.string { color: #0C5404 }
pre.code .name.builtin, code .name.builtin { color: #352B84 }
pre.code .deleted, code .deleted { background-color: #DEB0A1}
pre.code .inserted, code .inserted { background-color: #A3D289}

span.classifier {
  font-family: sans-serif ;
  font-style: oblique }

span.classifier-delimiter {
  font-family: sans-serif ;
  font-weight: bold }

span.interpreted {
  font-family: sans-serif }

span.option {
  white-space: nowrap }

span.pre {
  white-space: pre }

span.problematic {
  color: red }

span.section-subtitle {
  /* font-size relative to parent (h1..h6 element) */
  font-size: 80% }

table.citation {
  border-left: solid 1px gray;
  margin-left: 1px }

table.docinfo {
  margin: 2em 4em }

table.docutils {
  margin-top: 0.5em ;
  margin-bottom: 0.5em }

table.footnote {
  border-left: solid 1px black;
  margin-left: 1px }

table.docutils td, table.docutils th,
table.docinfo td, table.docinfo th {
  padding-left: 0.5em ;
  padding-right: 0.5em ;
  vertical-align: top }

table.docutils th.field-name, table.docinfo th.docinfo-name {
  font-weight: bold ;
  text-align: left ;
  white-space: nowrap ;
  padding-left: 0 }

/* "booktabs" style (no vertical lines) */
table.docutils.booktabs {
  border: 0px;
  border-top: 2px solid;
  border-bottom: 2px solid;
  border-collapse: collapse;
}
table.docutils.booktabs * {
  border: 0px;
}
table.docutils.booktabs th {
  border-bottom: thin solid;
  text-align: left;
}

h1 tt.docutils, h2 tt.docutils, h3 tt.docutils,
h4 tt.docutils, h5 tt.docutils, h6 tt.docutils {
  font-size: 100% }

ul.auto-toc {
  list-style-type: none }

</style>
</head>
<body>
<div class="document">


<p>#!/usr/bin/python
# -<em>- coding: ascii -</em>-</p>
<p>from __future__ import print_function # Python 2/3 compatibility</p>
<p>&quot;&quot;&quot;
&#64;author Dan Mercurio &lt;<a class="reference external" href="mailto:dmercurio92&#64;gmail.com">dmercurio92&#64;gmail.com</a>&gt;
&#64;date 8/14/2018
&quot;&quot;&quot;</p>
<p># Standard library imports
from os import walk, linesep
import os.path
from sys import argv as args, version_info
import inspect</p>
<p># Third-party libs
try:</p>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">/home/dan/PycharmProjects/lantera/xml/htmlgenerator.py</tt>, line 19)</p>
Unexpected indentation.</div>
<blockquote>
import yattag, bs4, lxml</blockquote>
<div class="system-message">
<p class="system-message-title">System Message: WARNING/2 (<tt class="docutils">/home/dan/PycharmProjects/lantera/xml/htmlgenerator.py</tt>, line 20)</p>
Block quote ends without a blank line; unexpected unindent.</div>
<dl class="docutils">
<dt>except ImportError as ie:</dt>
<dd>missing_dependency = &quot;&quot;.join(char for char in ie.msg.split(&quot; &quot;)[-1] if char.isalnum())
print(&quot;Fatal error: a required Python module could not be found.&quot;,
&quot;The &quot; + missing_dependency + &quot; module for Python &quot; + str(version_info.major) + &quot;.x must be installed using pip, easy_install,&quot;,
&quot;the system package manager (apt-get on Debian based Linux OSes), &quot; +
&quot;or manually downloading and extracting.&quot;, sep=&quot;n&quot;, end=&quot;nnExiting...n&quot;)
raise SystemExit</dd>
</dl>
<p>default_print = print</p>
<p>''' Util functions '''
def each(iterable, callback):</p>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">/home/dan/PycharmProjects/lantera/xml/htmlgenerator.py</tt>, line 33)</p>
Unexpected indentation.</div>
<blockquote>
<p>&quot;&quot;&quot; My own humble convenience function for functional iteration. &quot;&quot;&quot;
for index, item in enumerate(iterable):</p>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">/home/dan/PycharmProjects/lantera/xml/htmlgenerator.py</tt>, line 35)</p>
Unexpected indentation.</div>
<blockquote>
callback(iterable, index, item)
# ex. lambda x,y,z: x[y] -&gt; z</blockquote>
</blockquote>
<dl class="docutils">
<dt>def lineno():</dt>
<dd>&quot;&quot;&quot;Returns the current line number in our program.&quot;&quot;&quot;
return inspect.currentframe().f_back.f_lineno</dd>
<dt>def print_with_line(args, end):</dt>
<dd>default_print(lineno(), args)</dd>
</dl>
<p>''' End utils '''
print = print_with_line</p>
<dl class="docutils">
<dt>class HotelHTMLGenerator(object):</dt>
<dd><p class="first">&quot;&quot;&quot;
Singleton class to traverse a directory searching for a rates.input.xml file
and for each directory containing this file, produce two HTML files
(rate-chart.html and rate-month.html) with greater detail of
the hotel rates across month intervals.
&quot;&quot;&quot;</p>
<dl class="docutils">
<dt>def __init__(self, search_directory = &quot;./search&quot;, output_directory = &quot;./output&quot;, year = &quot;2018&quot;, verbose = True):</dt>
<dd><p class="first">&quot;&quot;&quot; Initialization of new instance. &quot;&quot;&quot;</p>
<p># First check if we are just displaying help text
if (&quot;-h&quot; in args) or (&quot;--help&quot; in args):</p>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">/home/dan/PycharmProjects/lantera/xml/htmlgenerator.py</tt>, line 62)</p>
Unexpected indentation.</div>
<blockquote>
self.help()</blockquote>
<dl class="docutils">
<dt>if len(args) is 1:</dt>
<dd>print(&quot;Script was called with no arguments. If you need info, invoke the script with -h or --help&quot;)
raise SystemExit</dd>
</dl>
<p># Verbose mode attribute
self.verbose = verbose</p>
<p># Output arguments script was called with if verbose was selected
if self.verbose: print(&quot;Arguments: &quot;, str(self.getArgs()), end=&quot;nn&quot;)</p>
<p># Attribute that stores search and output directories as a dict
self.dirs = dict()</p>
<p># Populate the attribute upon initialization
self.setDirs({</p>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">/home/dan/PycharmProjects/lantera/xml/htmlgenerator.py</tt>, line 80)</p>
Unexpected indentation.</div>
<blockquote>
'search_directory': search_directory,
'output_directory': output_directory</blockquote>
<div class="system-message">
<p class="system-message-title">System Message: WARNING/2 (<tt class="docutils">/home/dan/PycharmProjects/lantera/xml/htmlgenerator.py</tt>, line 82)</p>
Block quote ends without a blank line; unexpected unindent.</div>
<p>})</p>
<p>self.SEARCH_FILENAME = 'rates.input.xml'  # Constant for our search file</p>
<p># Set the year to 2018 AD unless otherwise
# specified in the arguments
if &quot;--year&quot; in args:</p>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">/home/dan/PycharmProjects/lantera/xml/htmlgenerator.py</tt>, line 89)</p>
Unexpected indentation.</div>
<blockquote>
self.year = args[args.index(&quot;--year&quot;) + 1]</blockquote>
<div class="system-message">
<p class="system-message-title">System Message: WARNING/2 (<tt class="docutils">/home/dan/PycharmProjects/lantera/xml/htmlgenerator.py</tt>, line 90)</p>
Block quote ends without a blank line; unexpected unindent.</div>
<dl class="docutils">
<dt>else:</dt>
<dd>self.year = year</dd>
<dt>if &quot;--relative&quot; not in args:</dt>
<dd>absolute_dirs = [os.path.realpath(val) for val in self.getDirs().values()]
joined_keys_and_vals = zip(self.getDirs().keys(), absolute_dirs)
joined_keys_and_vals = dict(joined_keys_and_vals)
self.setDirs(joined_keys_and_vals)</dd>
</dl>
<p># An attribute to hold the paths to discovered search results
self.paths = list()</p>
<p># An attribute to hold the XML parser objects
self.parser_objects = list()</p>
<p># An attribute to hold prettified raw XML strings for inspection/introspection
self.xml_strings = list()</p>
<p class="last"># An attribute to hold generated html in string form for writing to files
self.html_strings = list()</p>
</dd>
</dl>
<p>&#64;staticmethod
def help():</p>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">/home/dan/PycharmProjects/lantera/xml/htmlgenerator.py</tt>, line 113)</p>
Unexpected indentation.</div>
<blockquote class="last">
&quot;&quot;&quot; Print the help text. &quot;&quot;&quot;
helpText = &quot;&quot;&quot;Usage: python[3] {0} [search directory] [output directory] [--arguments (optional)]{1}</blockquote>
</dd>
<dt>Pass --relative to disable conversion of relative paths to absolute paths. Pass --year (4 digit year) to use a year other than 2018. Pass -h or --help to print this message&quot;&quot;&quot;.format(args[0], linesep)</dt>
<dd><blockquote class="first">
print(helpText)
raise SystemExit</blockquote>
<dl class="docutils">
<dt>def getDirs(self):</dt>
<dd>&quot;&quot;&quot; Get a hash of the directories we are using for search and output. &quot;&quot;&quot;
return self.dirs</dd>
<dt>def setDirs(self, new_dirs):</dt>
<dd><p class="first">&quot;&quot;&quot; Setter for input/output directories. &quot;&quot;&quot;
if self.verbose:</p>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">/home/dan/PycharmProjects/lantera/xml/htmlgenerator.py</tt>, line 126)</p>
Unexpected indentation.</div>
<blockquote>
<dl class="docutils">
<dt>if bool(self.getDirs()):</dt>
<dd>print(&quot;Initializing search and output directories to {0}n&quot;.format(self.getDirs()))</dd>
<dt>else:</dt>
<dd>print(&quot;Requested to change these self.dirs values: {0}n&quot;)</dd>
</dl>
</blockquote>
<div class="system-message">
<p class="system-message-title">System Message: WARNING/2 (<tt class="docutils">/home/dan/PycharmProjects/lantera/xml/htmlgenerator.py</tt>, line 130)</p>
Block quote ends without a blank line; unexpected unindent.</div>
<dl class="last docutils">
<dt>try:</dt>
<dd><p class="first">assert isinstance(new_dirs, dict) # Check that candidate dirs are a dictionary hash
try:</p>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">/home/dan/PycharmProjects/lantera/xml/htmlgenerator.py</tt>, line 133)</p>
Unexpected indentation.</div>
<blockquote>
<p>assert (len(new_dirs.keys()) &gt;= 2) # Additional validation for candidate dirs
self.dirs['search_directory'] = new_dirs['search_directory']
self.dirs['output_directory'] = new_dirs['output_directory']</p>
<p>if self.verbose: print(&quot;New self.dirs: {0}n&quot;.format(self.dirs))</p>
<p># Return new dirs
return self.dirs</p>
</blockquote>
<div class="system-message">
<p class="system-message-title">System Message: WARNING/2 (<tt class="docutils">/home/dan/PycharmProjects/lantera/xml/htmlgenerator.py</tt>, line 141)</p>
Block quote ends without a blank line; unexpected unindent.</div>
<dl class="last docutils">
<dt>except AssertionError:</dt>
<dd>raise SystemExit(&quot;Attempted to set directories with a dictionary missing keys&quot;)</dd>
</dl>
</dd>
<dt>except AssertionError:</dt>
<dd>raise SystemExit(&quot;Attempted to set directories to a non-dictionary object&quot;)</dd>
<dt>except KeyError:</dt>
<dd>raise SystemExit(&quot;Attempted to set directories with a dictionary of invalid keys. Required keys: 'search_directory', 'output_directory'.&quot;)</dd>
</dl>
</dd>
</dl>
<p>&#64;staticmethod
def getArgs():</p>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">/home/dan/PycharmProjects/lantera/xml/htmlgenerator.py</tt>, line 150)</p>
Unexpected indentation.</div>
<blockquote>
&quot;&quot;&quot; Get an enumerated list comprehension of the arguments with which the program was called. &quot;&quot;&quot;
return [arg for arg in enumerate(args)]</blockquote>
<dl class="last docutils">
<dt>def scan(self):</dt>
<dd><p class="first">&quot;&quot;&quot; Scan for input xml files and populate the paths attribute with results.
return self to support method j &quot;&quot;&quot;</p>
<p># Get the directory to start from
search_directory = self.getDirs().get('search_directory')</p>
<p># Make sure it actually exists
if not os.path.exists(search_directory):</p>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">/home/dan/PycharmProjects/lantera/xml/htmlgenerator.py</tt>, line 162)</p>
Unexpected indentation.</div>
<blockquote>
raise SystemExit(&quot;Specified search directory does not exist.&quot;)</blockquote>
<div class="system-message">
<p class="system-message-title">System Message: WARNING/2 (<tt class="docutils">/home/dan/PycharmProjects/lantera/xml/htmlgenerator.py</tt>, line 163)</p>
Block quote ends without a blank line; unexpected unindent.</div>
<dl class="docutils">
<dt>else:</dt>
<dd><dl class="first last docutils">
<dt>def search(search_directory):</dt>
<dd><p class="first">&quot;&quot;&quot; Generator which scans recursively for a rates.input.xml file and yields their paths &quot;&quot;&quot;
for root, dirs, files in walk(search_directory):</p>
<blockquote class="last">
<p># Make the search case insensitive by converting everything to lower case
files = [file.lower() for file in files]</p>
<p># Look for our XML file in among the files in the current directory
if self.SEARCH_FILENAME in files:</p>
<blockquote>
<p># Join path and filename
fullpath = os.path.join(root, self.SEARCH_FILENAME)</p>
<p># Detect symlinks
try:</p>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">/home/dan/PycharmProjects/lantera/xml/htmlgenerator.py</tt>, line 179)</p>
Unexpected indentation.</div>
<blockquote>
assert not os.path.islink(fullpath)</blockquote>
<div class="system-message">
<p class="system-message-title">System Message: WARNING/2 (<tt class="docutils">/home/dan/PycharmProjects/lantera/xml/htmlgenerator.py</tt>, line 180)</p>
Block quote ends without a blank line; unexpected unindent.</div>
<dl class="docutils">
<dt>except AssertionError as e:</dt>
<dd>print(&quot;Search result is a symlink (shortcut). Will use real path instead.&quot;)
continue</dd>
</dl>
<div class="system-message">
<p class="system-message-title">System Message: WARNING/2 (<tt class="docutils">/home/dan/PycharmProjects/lantera/xml/htmlgenerator.py</tt>, line 183)</p>
Definition list ends without a blank line; unexpected unindent.</div>
<p>fullpath = os.path.realpath(fullpath)</p>
<p># Verify we are actually pointing toward a file
try:</p>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">/home/dan/PycharmProjects/lantera/xml/htmlgenerator.py</tt>, line 187)</p>
Unexpected indentation.</div>
<blockquote>
assert os.path.isfile(fullpath)</blockquote>
<div class="system-message">
<p class="system-message-title">System Message: WARNING/2 (<tt class="docutils">/home/dan/PycharmProjects/lantera/xml/htmlgenerator.py</tt>, line 188)</p>
Block quote ends without a blank line; unexpected unindent.</div>
<dl class="docutils">
<dt>except AssertionError:</dt>
<dd>print(&quot;OS reports search result at {0} is not an actual file. Trying to continue...&quot;.format(fullpath))
continue</dd>
</dl>
<p># Try to convert a relative path to an absolute path
fullpath = os.path.realpath(fullpath)</p>
<p># Report result
print(&quot;Found {0} at {1}&quot;.format(self.SEARCH_FILENAME, fullpath))</p>
<p>yield fullpath</p>
</blockquote>
</blockquote>
</dd>
</dl>
</dd>
</dl>
<p>each(search(search_directory), lambda iterable, index, item: self.paths.append(item))</p>
<p># Output found paths if verbose mode was selected
if self.verbose: print(&quot;Paths: &quot;, self.paths)</p>
<p class="last">return self</p>
</dd>
<dt>def parse(self):</dt>
<dd><dl class="first docutils">
<dt>&quot;&quot;&quot; &#64;input: XML file paths attribute populated by scan() earlier in the method chain.</dt>
<dd>&#64;output: Populate top level object HotelHTMLGenerator.parser_objects attribute with XML parsers for each file loaded with the element tree from the hotel elements down
&#64;returns self to support further method chaining.</dd>
</dl>
<div class="system-message">
<p class="system-message-title">System Message: WARNING/2 (<tt class="docutils">/home/dan/PycharmProjects/lantera/xml/htmlgenerator.py</tt>, line 211)</p>
Definition list ends without a blank line; unexpected unindent.</div>
<p>&quot;&quot;&quot;
for xmlfile in self.paths:</p>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">/home/dan/PycharmProjects/lantera/xml/htmlgenerator.py</tt>, line 213)</p>
Unexpected indentation.</div>
<blockquote>
<dl class="docutils">
<dt>if not os.path.exists(xmlfile) or not os.path.isfile(xmlfile):</dt>
<dd>raise SystemExit(&quot;Generate HTML function was called with an invalid path or file.&quot;)</dd>
<dt>try:</dt>
<dd><p class="first">with open(xmlfile) as file:
# Entering file context</p>
<blockquote class="last">
<p># Parse raw XML
hotels = bs4.BeautifulSoup(file.read(), &quot;lxml&quot;).find_all('hotel')</p>
<dl class="docutils">
<dt>try:</dt>
<dd><p class="first"># Make sure the main XML document was parsed correctly and &lt;hotel&gt; tags were found.
assert len(hotels) is not 0</p>
<p># This attribute is mainly for introspection of the XML to be parsed, hence its being stored prettified.
self.xml_strings = [hotel.prettify() for hotel in hotels]</p>
<p class="last"># Parser objects that the generate_html method will use.
self.parser_objects = [hotel for hotel in hotels]</p>
</dd>
<dt>except AssertionError:</dt>
<dd>raise SystemExit('No &lt;hotel&gt; tags found')</dd>
</dl>
</blockquote>
</dd>
<dt>except IOError:</dt>
<dd>raise SystemExit(&quot;Unable to read found XML file.&quot;)</dd>
</dl>
<div class="system-message">
<p class="system-message-title">System Message: WARNING/2 (<tt class="docutils">/home/dan/PycharmProjects/lantera/xml/htmlgenerator.py</tt>, line 236)</p>
Definition list ends without a blank line; unexpected unindent.</div>
<p># Leaving file context, file handler closed</p>
</blockquote>
<div class="system-message">
<p class="system-message-title">System Message: WARNING/2 (<tt class="docutils">/home/dan/PycharmProjects/lantera/xml/htmlgenerator.py</tt>, line 237)</p>
Block quote ends without a blank line; unexpected unindent.</div>
<p class="last">return self</p>
</dd>
<dt>def generate_html(self):</dt>
<dd><dl class="first docutils">
<dt>''' &#64;input XML parsers stored as attribute on top level object</dt>
<dd>&#64;output for each expected output file, a tuple with the path where the file will be written, and the HTML to be written as a string. ex: [(output/high_low_rates.html, '&lt;html&gt;...&lt;/html&gt;'), (output/blah.html), &lt;html&gt;...&lt;/html&gt;), ...] appended to the top level object's html_strings attribute
&#64;returns self to support method chaining</dd>
</dl>
<div class="system-message">
<p class="system-message-title">System Message: WARNING/2 (<tt class="docutils">/home/dan/PycharmProjects/lantera/xml/htmlgenerator.py</tt>, line 243)</p>
Definition list ends without a blank line; unexpected unindent.</div>
<p>'''
# Here we define the callback for xml to html translation
def html_from_xml(xml_string):</p>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">/home/dan/PycharmProjects/lantera/xml/htmlgenerator.py</tt>, line 246)</p>
Unexpected indentation.</div>
<blockquote>
#print(xml_string)
pass</blockquote>
<p># Generate html
html_strings = each(self.parser_objects, lambda x, y, z: html_from_xml(z))
each(html_strings, lambda x, y, z: self.html_strings.append(z))</p>
<p># Append each html string to the main object's attribute
each(html_strings, lambda iterable, index, item: self.html_strings.append(item))</p>
<p class="last">return self</p>
</dd>
<dt>def write_output(self):</dt>
<dd><dl class="first docutils">
<dt>&quot;&quot;&quot; &#64;input Write the generated HTML stored in the attributes of the singleton class instance to their respective files.</dt>
<dd>&#64;output Written html files.
&#64;returns True on successful write or raises an exception for invalid input or I/O errors like no write permissions</dd>
</dl>
<div class="system-message">
<p class="system-message-title">System Message: WARNING/2 (<tt class="docutils">/home/dan/PycharmProjects/lantera/xml/htmlgenerator.py</tt>, line 262)</p>
Definition list ends without a blank line; unexpected unindent.</div>
<p class="last">&quot;&quot;&quot;
return self</p>
</dd>
</dl>
</dd>
<dt>if (__name__ == &quot;__main__&quot;):</dt>
<dd><p class="first"># Create an instance of our worker class
if len(args) == 3:</p>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">/home/dan/PycharmProjects/lantera/xml/htmlgenerator.py</tt>, line 268)</p>
Unexpected indentation.</div>
<blockquote>
hg = HotelHTMLGenerator(args[1], args[2])</blockquote>
<div class="system-message">
<p class="system-message-title">System Message: WARNING/2 (<tt class="docutils">/home/dan/PycharmProjects/lantera/xml/htmlgenerator.py</tt>, line 269)</p>
Block quote ends without a blank line; unexpected unindent.</div>
<dl class="docutils">
<dt>else:</dt>
<dd>hg = HotelHTMLGenerator()</dd>
</dl>
<p class="last"># Chain of actions this script is designed to perform
hg.scan().parse().generate_html().write_output()</p>
</dd>
</dl>
</div>
</body>
</html>
